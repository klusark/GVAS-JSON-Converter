const SavReader = require("../../../src/converter/sav-reader");
const IntProperty = require("../../../src/converter/properties/IntProperty");
const Int64Property = require("../../../src/converter/properties/Int64Property");
const UInt32Property = require("../../../src/converter/properties/UInt32Property");

test("IntProperty", () => {

    const IntPropertyBytes = new Uint8Array([
        /* 16 */                0x10, 0x00, 0x00, 0x00,
        /* "someIntProperty" */ 0x73, 0x6F, 0x6D, 0x65, 0x49, 0x6E, 0x74, 0x50, 0x72, 0x6F, 0x70, 0x65, 0x72, 0x74, 0x79, 0x00,
        /* 12 */                0x0C, 0x00, 0x00, 0x00,
        /* "IntProperty" */     0x49, 0x6E, 0x74, 0x50, 0x72, 0x6F, 0x70, 0x65, 0x72, 0x74, 0x79, 0x00,
        /* 4 -> 32bit value */  0x04,
        /* <Padding> */         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        /* 123 */               0x7B, 0x00, 0x00, 0x00
    ]);

    const someIntProperty = new SavReader(IntPropertyBytes.buffer).readProperty();
    expect(someIntProperty).toBeInstanceOf(IntProperty);
    expect(someIntProperty.name).toBe("someIntProperty");
    expect(someIntProperty.value).toBe(123);
    expect(someIntProperty.toBytes()).toEqual(IntPropertyBytes);
});

test("UInt32Property", () => {

    const UInt32PropertyBytes = new Uint8Array([
        /* 19 */                   0x13, 0x00, 0x00, 0x00,
        /* "someUInt32Property" */ 0x73, 0x6F, 0x6D, 0x65, 0x55, 0x49, 0x6E, 0x74, 0x33, 0x32, 0x50, 0x72, 0x6F, 0x70, 0x65, 0x72, 0x74, 0x79, 0x00,
        /* 15 */                   0x0F, 0x00, 0x00, 0x00,
        /* "UInt32Property" */     0x55, 0x49, 0x6E, 0x74, 0x33, 0x32, 0x50, 0x72, 0x6F, 0x70, 0x65, 0x72, 0x74, 0x79, 0x00,
        /* 4 -> 32bit value */     0x04,
        /* <Padding> */            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        /* 789 */                  0x15, 0x03, 0x00, 0x00
    ]);

    const someUInt32Property = new SavReader(UInt32PropertyBytes.buffer).readProperty();
    expect(someUInt32Property).toBeInstanceOf(UInt32Property);
    expect(someUInt32Property.name).toBe("someUInt32Property");
    expect(someUInt32Property.value).toBe(789);
    expect(someUInt32Property.toBytes()).toEqual(UInt32PropertyBytes);
});

test("Int64Property-Test1", () => {
    const data = new Uint8Array([
        /* 14 */              0x0E, 0x00, 0x00, 0x00,
        /* "someInteger64" */ 0x73, 0x6F, 0x6D, 0x65, 0x49, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x36, 0x34, 0x00,
        /* 14 */              0x0E, 0x00, 0x00, 0x00,
        /* "Int64Property" */ 0x49, 0x6E, 0x74, 0x36, 0x34, 0x50, 0x72, 0x6F, 0x70, 0x65, 0x72, 0x74, 0x79, 0x00,
        /* unknown */         0x08,
        /* unknown */         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
        /* unknown */         0x91, 0xC7, 0x1D, 0x47, 0x0F, 0x92, 0x55, 0x43,
        /* unknown */         0x82, 0x8B, 0xAA, 0x4C, 0x8A, 0x0D, 0xC9, 0xD0,
        /* 444 */             0xBC, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ]);

    const property = new SavReader(data.buffer).readProperty();
    expect(property).toBeInstanceOf(Int64Property);
    expect(property.name).toBe("someInteger64");
    expect(property.value).toBe(444n);
    expect(property.toBytes()).toEqual(data);
});

test("Int64Property-Test2", () => {
    const data = new Uint8Array([
        /* 8 */               0x08, 0x00, 0x00, 0x00,
        /* "int64-a" */       0x69, 0x6E, 0x74, 0x36, 0x34, 0x2D, 0x61, 0x00,
        /* 14 */              0x0E, 0x00, 0x00, 0x00,
        /* "Int64Property" */ 0x49, 0x6E, 0x74, 0x36, 0x34, 0x50, 0x72, 0x6F, 0x70, 0x65, 0x72, 0x74, 0x79, 0x00,
        /* unknown */         0x08,
        /* unknown */         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
        /* unknown */         0xA7, 0x0C, 0xD3, 0x96, 0x9D, 0x68, 0x52, 0x43,
        /* unknown */         0x95, 0x1B, 0x26, 0xD4, 0x58, 0x98, 0x21, 0x33,
        /* -777 */            0xF7, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    ]);

    const property = new SavReader(data.buffer).readProperty();
    expect(property).toBeInstanceOf(Int64Property);
    expect(property.name).toBe("int64-a");
    expect(property.value).toBe(-777n);
    expect(property.toBytes()).toEqual(data);
});
