const Benchmark = require('benchmark');
const {ArrayProperty} = require("../../src/converter/properties");

const someArrayProperty = {
    "type": "ArrayProperty",
    "name": "CharacterPresetData",
    "subtype": "NameProperty",
    "value": [
        "EyebrowColorMale001",
        "EyebrowMale005",
        "EyeColorMale007",
        "MarkingMale000g",
        "MarkingMale001b",
        "MarkingMale002c",
        "MarkingMale003a",
        "HairColorMale001",
        "HairMale007",
        "FaceMale013",
        "SkinColorMale008"
    ]
};

const someArrayPropertyBytes = new Uint8Array([

    /* name length (20) */              0x14, 0x00, 0x00, 0x00,
    /* name ("CharacterPresetData") */  0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x00,

    /* type length (14) */              0x0E, 0x00, 0x00, 0x00,
    /* type ("ArrayProperty") */        0x41, 0x72, 0x72, 0x61, 0x79, 0x50, 0x72, 0x6F, 0x70, 0x65, 0x72, 0x74, 0x79, 0x00,

    /* content length (221) */          0xDD, 0x00, 0x00, 0x00,

    /* padding */                       0x00, 0x00, 0x00, 0x00,

    /* subtype length (13) */           0x0D, 0x00, 0x00, 0x00,
    /* subtype ("NameProperty") */      0x4E, 0x61, 0x6D, 0x65, 0x50, 0x72, 0x6F, 0x70, 0x65, 0x72, 0x74, 0x79, 0x00,

    /* content start marker */          0x00,

    /* number of array elements (11) */ 0x0B, 0x00, 0x00, 0x00,

    0x14, 0x00, 0x00, 0x00,
    0x45, 0x79, 0x65, 0x62, 0x72, 0x6F, 0x77, 0x43, 0x6F, 0x6C, 0x6F, 0x72, 0x4D, 0x61, 0x6C, 0x65, 0x30, 0x30, 0x31, 0x00,
    0x0F, 0x00, 0x00, 0x00,
    0x45, 0x79, 0x65, 0x62, 0x72, 0x6F, 0x77, 0x4D, 0x61, 0x6C, 0x65, 0x30, 0x30, 0x35, 0x00,
    0x10, 0x00, 0x00, 0x00,
    0x45, 0x79, 0x65, 0x43, 0x6F, 0x6C, 0x6F, 0x72, 0x4D, 0x61, 0x6C, 0x65, 0x30, 0x30, 0x37, 0x00,
    0x10, 0x00, 0x00, 0x00,
    0x4D, 0x61, 0x72, 0x6B, 0x69, 0x6E, 0x67, 0x4D, 0x61, 0x6C, 0x65, 0x30, 0x30, 0x30, 0x67, 0x00,
    0x10, 0x00, 0x00, 0x00,
    0x4D, 0x61, 0x72, 0x6B, 0x69, 0x6E, 0x67, 0x4D, 0x61, 0x6C, 0x65, 0x30, 0x30, 0x31, 0x62, 0x00,
    0x10, 0x00, 0x00, 0x00,
    0x4D, 0x61, 0x72, 0x6B, 0x69, 0x6E, 0x67, 0x4D, 0x61, 0x6C, 0x65, 0x30, 0x30, 0x32, 0x63, 0x00,
    0x10, 0x00, 0x00, 0x00,
    0x4D, 0x61, 0x72, 0x6B, 0x69, 0x6E, 0x67, 0x4D, 0x61, 0x6C, 0x65, 0x30, 0x30, 0x33, 0x61, 0x00,
    0x11, 0x00, 0x00, 0x00,
    0x48, 0x61, 0x69, 0x72, 0x43, 0x6F, 0x6C, 0x6F, 0x72, 0x4D, 0x61, 0x6C, 0x65, 0x30, 0x30, 0x31, 0x00,
    0x0C, 0x00, 0x00, 0x00,
    0x48, 0x61, 0x69, 0x72, 0x4D, 0x61, 0x6C, 0x65, 0x30, 0x30, 0x37, 0x00,
    0x0C, 0x00, 0x00, 0x00,
    0x46, 0x61, 0x63, 0x65, 0x4D, 0x61, 0x6C, 0x65, 0x30, 0x31, 0x33, 0x00,
    0x11, 0x00, 0x00, 0x00,
    0x53, 0x6B, 0x69, 0x6E, 0x43, 0x6F, 0x6C, 0x6F, 0x72, 0x4D, 0x61, 0x6C, 0x65, 0x30, 0x30, 0x38, 0x00
]);

function newToBytes() {
    const instance = Object.create(ArrayProperty.prototype);
    Object.assign(instance, someArrayProperty);

    return instance.toBytes();
}

function oldToBytes() {
    const instance = Object.create(ArrayProperty.prototype);
    Object.assign(instance, someArrayProperty);

    return instance.toBytesOld();
}


const suite = new Benchmark.Suite("performance");

suite
    .add('newToBytes', newToBytes)
    .add('oldToBytes', oldToBytes)
    .on('start', function () {
        if (Buffer.compare(Buffer.from(oldToBytes()), Buffer.from(someArrayPropertyBytes)) !== 0) {
            throw new Error("oldToBytes BAD!")
        }
        if (Buffer.compare(Buffer.from(newToBytes()), Buffer.from(someArrayPropertyBytes)) !== 0) {
            throw new Error("newToBytes BAD!")
        }
    })
    .on('cycle', function (event) {
        const benchmark = event.target;
        console.log(`Benchmark: ${benchmark.name}`);
        console.log(`Operations per second (Hz): ${benchmark.hz.toFixed(2)} ops/sec`);
        console.log(`Relative Margin of Error (RME): ${benchmark.stats.rme.toFixed(2)}%`);
        console.log(`Sample Size: ${benchmark.stats.sample.length} iterations`);
        console.log(`Total Executions: ${benchmark.count} times`);
        console.log(`Total Cycles: ${benchmark.cycles} cycles\n`);
    })
    .on('complete', function () {
        const fastestBenchmark = this.filter('fastest')[0];
        const slowestBenchmark = this.filter('slowest')[0];
        const slowestHz = slowestBenchmark.hz;

        console.log('\nBenchmark Summary:');
        this.forEach(bench => {
            const speedDifference = ((bench.hz / slowestHz) * 100).toFixed(2);
            console.log(`${bench.name.padEnd(20)}: ${bench.hz.toFixed(2).padStart(12)} ops/sec (${speedDifference}% of slowest)`);
        });

        console.log(`\nFastest Benchmark: ${fastestBenchmark.name}`);
    })
    .run();
